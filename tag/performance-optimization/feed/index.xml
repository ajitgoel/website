<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Performance Optimization &#8211; So many manuals, so little time</title>
	<atom:link href="/tag/performance-optimization/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>So many manuals, so little time</description>
	<lastBuildDate>Sun, 03 Sep 2017 21:30:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>Improve performance of T-sql statements containing encrypted columns.</title>
		<link>/improve-performance-of-t-sql-statements-containing-encrypted-columns-2/</link>
		<comments>/improve-performance-of-t-sql-statements-containing-encrypted-columns-2/#respond</comments>
		<pubDate>Wed, 08 Mar 2017 15:32:25 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[Performance Optimization]]></category>
		<category><![CDATA[SQL server]]></category>
		<category><![CDATA[T-SQL]]></category>

		<guid isPermaLink="false">/?p=1279</guid>
		<description><![CDATA[<p>We can use database level encryption to encrypt sensitive information. A commonly used level of encryption is to only encrypt columns that contain sensitive information like credit card numbers, date of birth etc. Encrypting and decrypting database level information is very CPU resource intensive. If a column is used as a primary key or used [&#8230;]</p>
<p>The post <a rel="nofollow" href="/improve-performance-of-t-sql-statements-containing-encrypted-columns-2/">Improve performance of T-sql statements containing encrypted columns.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>We can use database level encryption to encrypt sensitive information. A commonly used level of encryption is to only encrypt columns that contain sensitive information like credit card numbers, date of birth etc. Encrypting and decrypting database level information is very CPU  resource intensive. If a column is used as a primary key or used in comparison clauses (WHERE clauses, JOIN conditions) the database will have to decrypt the whole column to perform operations involving those columns.</p>
<p>We faced a similar performance issue in one of the previous companies. Database selects based on SSN were very slow as the database had to decrypt the whole column to perform comparison. If you look at the information below(under <strong>Current Problem</strong>) the database performed 4413 logical reads, 4406 read-ahead reads and took 302 milli seconds to perform the operation. </p>
<p>To improve the performance of these kinds of queries, we decided to store the last four digits of the SSN in clear text and index the column as a non-clustered index. First filtering the rows based on last four digits of the SSN and then filtering the rows based on SSN lead to a dramatic improvement in performance. f you look at the information below(under <strong>Improved Solution</strong>) the database performed 27 logical reads, 10 physical reads 10, 8 read-ahead reads and took 71 milli seconds to perform the operation.<br />
All in all a huge performance improvement. </p>
<p><strong>Current Problem:</strong></p>
<pre class="brush: csharp; title: ; notranslate">
begin
DBCC FREEPROCCACHE;
DBCC DROPCLEANBUFFERS;
SET STATISTICS TIME ON;
SET STATISTICS IO ON;

declare @ssn varchar(max) = '123123123'
with PersonalIdentifierInformationCTE as
(
select CONVERT (CHAR(32), DECRYPTBYKEYAUTOCERT(CERT_ID('CertificateName'), NULL, Identifier)) as Identifier
from PersonalIdentifierInformation
)
select *
from PersonalIdentifierInformationCTE where Identifier is not null
and Identifier=@ssn
end
</pre>
<pre class="brush: csharp; highlight: [6,7,8,11]; title: ; notranslate">
DBCC execution completed. If DBCC printed error messages, contact your system administrator.
DBCC execution completed. If DBCC printed error messages, contact your system administrator.
SQL Server Execution Times:
CPU time = 0 ms, elapsed time = 0 ms.
(8 row(s) affected)
Table 'PersonalIdentifierInformation'. Scan count 1, logical reads 4413, 
physical reads 3, read-ahead reads 4406, lob logical reads 0, 
lob physical reads 0, lob read-ahead reads 0.
(1 row(s) affected)
SQL Server Execution Times:
CPU time = 250 ms, elapsed time = 302 ms.
SQL Server parse and compile time:
CPU time = 0 ms, elapsed time = 0 ms.
SQL Server Execution Times:
CPU time = 0 ms, elapsed time = 0 ms.
</pre>
<p><img src="/wp-content/uploads/2017/03/030817_1532_Improveperf1.png" alt="" /></p>
<p><img src="/wp-content/uploads/2017/03/030817_1532_Improveperf2.png" alt="" /></p>
<p><strong>Improved Solution:</strong></p>
<pre class="brush: csharp; highlight: [16,17]; title: ; notranslate">
begin
declare @ssn varchar(max) = '123123123'

DBCC FREEPROCCACHE;
DBCC DROPCLEANBUFFERS;
SET STATISTICS TIME ON;
SET STATISTICS IO ON;

with PersonalIdentifierInformationCTE as 
(
select CONVERT (CHAR(32), DECRYPTBYKEYAUTOCERT(CERT_ID('CertificateName'), NULL, Identifier)) as Identifier, SSNLast4
from PersonalIdentifierInformation
)
select *
from PersonalIdentifierInformationCTE 
where SSNLast4&lt;&gt; 0 and SSNLast4 = substring(@ssn, LEN(@ssn)-4+1, LEN(@ssn)) 
and Identifier is not null
and  Identifier=@ssn
end
</pre>
<pre class="brush: csharp; highlight: [20,21,22,25]; title: ; notranslate">
SQL Server parse and compile time: 
   CPU time = 0 ms, elapsed time = 0 ms.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 0 ms.
SQL Server parse and compile time: 
   CPU time = 0 ms, elapsed time = 13 ms.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 0 ms.
DBCC execution completed. If DBCC printed error messages, contact your system administrator.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 2 ms.
DBCC execution completed. If DBCC printed error messages, contact your system administrator.
 SQL Server Execution Times:
   CPU time = 16 ms,  elapsed time = 16 ms.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 0 ms.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 0 ms.
    (8 row(s) affected)
Table 'PersonalIdentifierInformation'. Scan count 1, logical reads 27, 
physical reads 10, read-ahead reads 8, lob logical reads 0, 
lob physical reads 0, lob read-ahead reads 0.
    (1 row(s) affected)
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 71 ms.
SQL Server parse and compile time: 
   CPU time = 0 ms, elapsed time = 0 ms.
 SQL Server Execution Times:
   CPU time = 0 ms,  elapsed time = 0 ms.
</pre>
<p><img src="/wp-content/uploads/2017/03/030817_1532_Improveperf3.png" alt="" /></p>
<p><img src="/wp-content/uploads/2017/03/030817_1532_Improveperf4.png" alt="" /></p>
<p>The post <a rel="nofollow" href="/improve-performance-of-t-sql-statements-containing-encrypted-columns-2/">Improve performance of T-sql statements containing encrypted columns.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/improve-performance-of-t-sql-statements-containing-encrypted-columns-2/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Use ProtoBuf.Net to improve serialization performance</title>
		<link>/use-protobuf-net-to-improve-serialization-performance/</link>
		<comments>/use-protobuf-net-to-improve-serialization-performance/#respond</comments>
		<pubDate>Sun, 10 Jul 2016 00:53:36 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Performance Optimization]]></category>
		<category><![CDATA[ProtoBuf.Net]]></category>

		<guid isPermaLink="false">/?p=1010</guid>
		<description><![CDATA[<p>Our application relied on data that did not change often. It had therefore implemented a solution that cached this data as xml files. These files were written to the web server on the first request and subsequently read whenever they were needed. Some of the problems that arose due to this was: a. Since the application was load [&#8230;]</p>
<p>The post <a rel="nofollow" href="/use-protobuf-net-to-improve-serialization-performance/">Use ProtoBuf.Net to improve serialization performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Our application relied on data that did not change often. It had therefore implemented a solution that cached this data as xml files. These files were written to the web server on the first request and subsequently read whenever they were needed.<br />
Some of the problems that arose due to this was:<br />
a. Since the application was load balanced, a web server servicing a web request was not guaranteed to serve the next web request. This lead to the data in the various web servers quickly getting out of sync.<br />
b. Our application was very slow. Profiling the application showed that showed that reading and writing(i.e serialization and de-serialization) the XML cache files was one of the biggest bottleneck in the application.<br />
XML serialization is one of the slowest serializationde-serialization formats in the .Net framework. See the excellent <a href="http://maxondev.com/serialization-performance-comparison-c-net-formats-frameworks-xmldatacontractserializer-xmlserializer-binaryformatter-json-newtonsoft-servicestack-text/">article</a> where Maxim Novak compares the various types of serialization in the .Net framework.</p>
<p>We therefore decided to change the serialization format from XML to <a href="https://github.com/mgravell/protobuf-net">ProtoBuf.Net</a>. Protobuf-net is a contract based serializer for .NET code, that writes data in the &#8220;protocol buffers&#8221; serialization format engineered by Google. This framework component is written by Marc Gravell, considered as a .Net guru.<br />
We also decided to change the application to write the cache files to a single file server and create the cache files in a background thread. I will write a separate article for the same in the future.<br />
Changing the application to ProtoBuf.Net protocol was pretty straightforward.<br />
a. Use Nuget to install ProtoBuf.Net framework component.</p>
<pre class="brush: csharp; title: ; notranslate">
Install-Package protobuf-net
</pre>
<p>b. Add [ProtoContract] attribute to each class that needs to be serialized and [ProtoMember] Attribute with a unique integer to identify each member that needs to be serialized.</p>
<pre class="brush: csharp; highlight: [2,5,7]; title: ; notranslate">
using ProtoBuf;
[ProtoContract]
class Person 
{
    [ProtoMember(1)]
    public int Id {get;set;}
    [ProtoMember(2)]
    public string Name {get;set:}
}
</pre>
<p>c. Serialize and deserialize your data</p>
<pre class="brush: csharp; highlight: [3]; title: ; notranslate">
using (var file = File.Create(&quot;person.bin&quot;)) 
{
    Serializer.Serialize(file, person);
}
</pre>
<pre class="brush: csharp; highlight: [4]; title: ; notranslate">
Person person;
using (var file = File.OpenRead(&quot;person.bin&quot;)) 
{
    person = Serializer.Deserialize&lt;Person&gt;(file);
}
</pre>
<p>As you can see from the charts below, the change from<br />
a. XML to ProtoBuf.Net serialization<br />
b. caching the files in a single file server instead of multiple file servers<br />
c. offloading the work of generating the cache files to a background thread<br />
was a huge success.</p>
<p><img class="aligncenter wp-image-992 size-full" src="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1.png" alt="ProtoBuf.NetPerformanceImprovement-Part1" width="929" height="569" srcset="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1.png 929w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1-300x184.png 300w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1-768x470.png 768w" sizes="(max-width: 929px) 100vw, 929px" /></p>
<p>&nbsp;</p>
<p><img class="aligncenter wp-image-993 size-full" src="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2.png" alt="ProtoBuf.NetPerformanceImprovement-Part2" width="928" height="568" srcset="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2.png 928w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2-300x184.png 300w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2-768x470.png 768w" sizes="(max-width: 928px) 100vw, 928px" /></p>
<p><strong>Using ProtoBuf.Net Serialization:</strong> The .Net profiler shows &#8220;HotSpots&#8221; due to serialization and de-serialization are much reduced. File sizes are also much reduced.</p>
<p><img class="aligncenter wp-image-1016" src="/wp-content/uploads/2016/07/ProtoBufNetSerialization1-300x218.jpg" alt="ProtoBufNetSerialization1" width="384" height="279" /></p>
<p><img class="aligncenter wp-image-1017" src="/wp-content/uploads/2016/07/ProtoBufNetSerialization2.jpg" alt="ProtoBufNetSerialization2" width="312" height="123" /></p>
<p><strong>Using XML Serialization:</strong> The .Net profiler shows high CPU usage i.e &#8220;HotSpots&#8221; due to XML serialization and de-serialization. File sizes are also much larger.</p>
<p><img class="aligncenter wp-image-1017" src="/wp-content/uploads/2016/07/XMLSerialization1-300x217.jpg" alt="XMLSerialization1" width="300" height="217" /></p>
<p><img class="wp-image-1017 aligncenter" src="/wp-content/uploads/2016/07/XMLSerialization2.jpg" alt="XMLSerialization2" width="278" height="103" /></p>
<p>The post <a rel="nofollow" href="/use-protobuf-net-to-improve-serialization-performance/">Use ProtoBuf.Net to improve serialization performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/use-protobuf-net-to-improve-serialization-performance/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Tips to increase database performance</title>
		<link>/tips-to-increase-database-performance/</link>
		<comments>/tips-to-increase-database-performance/#respond</comments>
		<pubDate>Sun, 17 Apr 2016 16:58:03 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[Performance Optimization]]></category>
		<category><![CDATA[SQL server]]></category>
		<category><![CDATA[T-SQL]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=645</guid>
		<description><![CDATA[<p>Here are some of the points that you should consider when you write queries: Limit number of rows and columns Use &#8220;Search argument able&#8221; conditions in &#8220;where&#8221; clause. They help query optimizers to use the index defined on column(s) effectively and have a higher chance of meeting index seek than index or table scan. &#8220;Search [&#8230;]</p>
<p>The post <a rel="nofollow" href="/tips-to-increase-database-performance/">Tips to increase database performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Here are some of the points that you should consider when you write queries:</p>
<li>Limit number of rows and columns</li>
<li>Use &#8220;Search argument able&#8221; conditions in &#8220;where&#8221; clause. They help query optimizers to use the index defined on column(s) effectively and have a higher chance of meeting index seek than index or table scan.<br />
&#8220;Search argument able&#8221; operators are :<br />
=, >, >=, <, <=, BETWEEN, LIKE (only those LIKE conditions that have a wildcard character as a suffix, eg: FirstName LIKE 'A%'
</li>
<li>Do not use arithmetic operators directly on the &#8220;column name&#8221; in the &#8220;where&#8221; clause. Instead use logical workarounds to get performance benefits. eg:<br />
instead of </p>
<pre class="brush: sql; title: ; notranslate">WHERE HourlyRate * 8 &lt;= 100</pre>
<p>use </p>
<pre class="brush: sql; title: ; notranslate">WHERE HourlyRate &lt;= 100/8</pre>
</li>
<li>Do not use functions on columns in the &#8220;where&#8221; clause. eg:<br />
a. Instead of </p>
<pre class="brush: sql; title: ; notranslate">WHERE DATEPART(YYYY,CreateDate)='2016'</pre>
<p>use </p>
<pre class="brush: sql; title: ; notranslate">WHERE CreateDate &gt;= '01/01/2016' AND CreateDate &lt;= '12/31/2016'</pre>
</li>
<p>b. Instead of </p>
<pre class="brush: sql; title: ; notranslate">WHERE Left(LastName,1)='A'</pre>
<p>use </p>
<pre class="brush: sql; title: ; notranslate">WHERE LastName LIKE 'A%'</pre>
</li>
<li>Use proper primary and Foreign Key constraints. They help the query optimizer select the best-suited execution plan for the query. </li>
<p>Here are some of the points that you should consider when designing indexes. </p>
<li>Try to use maximum 4-5 indexes on one table, not more. If you have read-only table, then the number of indexes may be increased.</li>
<li>Keep your indexes as narrow as possible. This reduces the size of the index and reduces the number of reads required to read the index.</li>
<li>Try to create indexes on columns that have integer values rather than character values.</li>
<li>If you create a composite (multi-column) index, the order of the columns in the key are very important. Try to order the columns in the key as to enhance selectivity, with the most selective columns to the leftmost of the key.
</li>
<p>The post <a rel="nofollow" href="/tips-to-increase-database-performance/">Tips to increase database performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/tips-to-increase-database-performance/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>ASP.Net session size in SQL Server session database</title>
		<link>/check-session-size-in-sql-server-session-database/</link>
		<comments>/check-session-size-in-sql-server-session-database/#respond</comments>
		<pubDate>Fri, 18 Mar 2016 05:36:08 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Performance Optimization]]></category>
		<category><![CDATA[SQL server]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=492</guid>
		<description><![CDATA[<p>Problem: We need to calculate ASP.Net Session size in a SQL server session database Solution: Use the following query(shamelessly stolen from asp.net: checking session size in SQL Server ASPState DB) to check the size of the session state data.</p>
<p>The post <a rel="nofollow" href="/check-session-size-in-sql-server-session-database/">ASP.Net session size in SQL Server session database</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Problem:</strong><br />
We need to calculate ASP.Net Session size in a SQL server session database<br />
<strong><br />
Solution: </strong><br />
Use the following query(shamelessly stolen from <a href="https://blogs.msdn.microsoft.com/rextang/2008/01/12/asp-net-checking-session-size-in-sql-server-aspstate-db/">asp.net: checking session size in SQL Server ASPState DB</a>) to check the size of the session state data.  </p>
<pre class="brush: sql; title: ; notranslate">
SELECT 
    a.SessionId, 
    SUBSTRING(a.SessionId, 25, 8) AS AppIDHex, 
    b.AppId AS AppIDDec, 
    b.AppName, 
    DATALENGTH(a.SessionItemLong) AS SessionSize 
FROM 
    dbo.ASPStateTempSessions AS a 
    LEFT OUTER JOIN 
    dbo.ASPStateTempApplications AS b 
    ON 
    SUBSTRING(a.SessionId, 25, 8) = 
    SUBSTRING(sys.fn_varbintohexstr(CONVERT(VarBinary,b.AppId)), 3, 8) 
WHERE 
    (DATALENGTH(a.SessionItemLong) &gt; 0) 
ORDER BY SessionSize DESC
</pre>
<p>The post <a rel="nofollow" href="/check-session-size-in-sql-server-session-database/">ASP.Net session size in SQL Server session database</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/check-session-size-in-sql-server-session-database/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Performance Improvement for very important client</title>
		<link>/performance-improvement-for-very-important-client/</link>
		<comments>/performance-improvement-for-very-important-client/#respond</comments>
		<pubDate>Wed, 10 Feb 2016 21:11:54 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[JetBrains DotTrace]]></category>
		<category><![CDATA[Linq]]></category>
		<category><![CDATA[Performance Optimization]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=1</guid>
		<description><![CDATA[<p>This data is for all our clients that use our application. Based on the data below there is a significant performance improvement in the application performance in the latest release. Please see highlighted area below. The latest release took place on March 2016. One of our biggest clients was threatening to leave us for another provider. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/performance-improvement-for-very-important-client/">Performance Improvement for very important client</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>This data is for all our clients that use our application. Based on the data below there is a significant performance improvement in the application performance in the latest release. Please see highlighted area below. The latest release took place on March 2016.</p>
<p><img class="alignnone wp-image-5" src="http://blog-goel.rhcloud.com/wp-content/uploads/2016/02/March2016PerformanceImprovement-300x129.png" alt="March2016PerformanceImprovement" width="584" height="264" /></p>
<p>One of our biggest clients was threatening to leave us for another provider. Its users were experiencing very long load times(more than a minute in some cases), timeouts etc. I profiled the application using JetBrains DotTrace. All the hotspots in the profiler trace pointed to a very complex stored procedure being called again and again in the application. Since the stored procedure was very complex and used by several other applications it was decided to not change it. Instead we decided to store the results of this stored procedure in session. This lead to the dramatic performance improvement as shown above.</p>
<pre class="brush: csharp; highlight: [10,11,12,13,14,15,16,17,18,19,20]; title: ; notranslate">
    using System.Web;
    public class RentableItemsStrategy
    {
        public RentableItemsStrategy()
        {
        }

        public RentableTypes Get(int unitId, string dateNeeded, int leaseId)
        {
            var keyTemp = Key(unitId, dateNeeded, leaseId);
            if (HttpContext.Current == null || HttpContext.Current.Session == null)
            {
                return null;
            }
            
            var rentableTypesForUnitIdDateNeededLeaseId = HttpContext.Current.Session[keyTemp] as RentableTypes;
            if (rentableTypesForUnitIdDateNeededLeaseId != null)
            {
                return rentableTypesForUnitIdDateNeededLeaseId;
            }
            
            var xmlNode = new ServiceAgent.ResidentSvc().GetRentableItems(unitId, dateNeeded, leaseId);
            var rentableTypes = RentableTypes.FromXml(xmlNode);
            HttpContext.Current.Session[keyTemp] = rentableTypes;
            return rentableTypes;
        }

        private string Key(int unitId, string dateNeeded, int leaseId)
        {
            return string.Format(&quot;RentableTypes-{0}-{1}-{2}&quot;, unitId, dateNeeded, leaseId);
        }
    }
</pre>
<p>The post <a rel="nofollow" href="/performance-improvement-for-very-important-client/">Performance Improvement for very important client</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/performance-improvement-for-very-important-client/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: www.ajitgoel.net @ 2017-09-27 03:24:32 by W3 Total Cache -->