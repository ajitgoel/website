<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Dependency injection &#8211; So many manuals, so little time</title>
	<atom:link href="/tag/dependency-injection/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>So many manuals, so little time</description>
	<lastBuildDate>Sun, 03 Sep 2017 21:30:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>Configure StructureMap for Asp.Net MVC</title>
		<link>/configure-structuremap-for-asp-net-mvc/</link>
		<comments>/configure-structuremap-for-asp-net-mvc/#respond</comments>
		<pubDate>Sat, 16 Apr 2016 23:21:08 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Dependency injection]]></category>
		<category><![CDATA[StructureMap]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=611</guid>
		<description><![CDATA[<p>Problem: How do I configure StructureMap for Asp.Net MVC? Solution: a. Install StructureMap using NuGet and the following command. Once StructureMap is installed, you’ll notice several additions to your web project including a new &#8220;DependencyResolution&#8221; folder. b. Create a new interface. Implement this interface with a new class. c. Have the Controller work with this [&#8230;]</p>
<p>The post <a rel="nofollow" href="/configure-structuremap-for-asp-net-mvc/">Configure StructureMap for Asp.Net MVC</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Problem:</strong><br />
How do I configure StructureMap for Asp.Net MVC?</p>
<p><strong>Solution: </strong><br />
a. Install StructureMap using NuGet and the following command.</p>
<pre class="brush: csharp; title: ; notranslate">
install-package StructureMap.MVC5 
</pre>
<p>Once StructureMap is installed, you’ll notice several additions to your web project including a new &#8220;DependencyResolution&#8221; folder.</p>
<p><img class="alignnone size-medium wp-image-614" src="http://blog-goel.rhcloud.com/wp-content/uploads/2016/04/DependencyInjection-239x300.png" alt="Dependency Injection" width="239" height="300" srcset="/wp-content/uploads/2016/04/DependencyInjection-239x300.png 239w, /wp-content/uploads/2016/04/DependencyInjection.png 418w" sizes="(max-width: 239px) 100vw, 239px" /></p>
<p>b. Create a new interface. Implement this interface with a new class.</p>
<pre class="brush: csharp; title: ; notranslate">
 public interface IDependency
    {
        string SayHelloWorld();
    }
    public class Dependency : IDependency
    {
        public string SayHelloWorld()
        {
            return &quot;Hello World&quot;;
        }
    }
</pre>
<p>c. Have the Controller work with this interface:</p>
<pre class="brush: csharp; title: ; notranslate">
public class HomeController : Controller
{
    private readonly IDependency dependency;
    public HomeController(IDependency dependency)
    {
        this.dependency = dependency;
    }
    public ActionResult Index()
    {
        return Content(this.dependency.SayHelloWorld());
    }
}
</pre>
<p>d. Run your application.The &#8220;Concrete Dependency&#8221; is successfully injected in HomeController.<br />
<img class="alignnone size-full wp-image-617" src="http://blog-goel.rhcloud.com/wp-content/uploads/2016/04/DependencyInjection-Results.png" alt="Dependency Injection-Results" width="266" height="81" /></p>
<p>We didn’t tell StructureMap how to resolve the &#8220;IDependency&#8221; interface, or let it know anything about the &#8220;Dependency&#8221; implementation. How did it figure this out?</p>
<p>In the DefaultRegistry.cs file, there is a line of code that reads</p>
<pre class="brush: csharp; title: ; notranslate">
scan.WithDefaultConventions();
</pre>
<p>This code will automatically attempt to resolve any interface named &#8220;IDependency&#8221; with an instance type named &#8220;Dependency&#8221;. That is, the same name, but without the “I” prefix. If instead the name of the class was &#8220;ConcreteDependency&#8221; then the code below will not work. in this case, you will have to specify the types explicitly.You would do that by adding.</p>
<pre class="brush: csharp; title: ; notranslate">
For&lt;IDependency&gt;().Use&lt;ConcreteDependency&gt;();
</pre>
<p>It is commented out in the DefaultRegistry.cs code </p>
<pre class="brush: csharp; title: ; notranslate">
public class DefaultRegistry : Registry 
{
        public DefaultRegistry() 
        {
            Scan(
                scan =&gt; 
                {
                    scan.TheCallingAssembly();
                    scan.WithDefaultConventions();
                    scan.With(new ControllerConvention());
                });
                //For&lt;IDependency&gt;().Use&lt;ConcreteDependency&gt;();
        }
}
</pre>
<pre class="brush: csharp; title: ; notranslate">
public static class IoC
    {
        public static IContainer Initialize()
        {   
            return new Container(c =&gt; c.AddRegistry&lt;DefaultRegistry&gt;());
        }
    }
</pre>
<p>The post <a rel="nofollow" href="/configure-structuremap-for-asp-net-mvc/">Configure StructureMap for Asp.Net MVC</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/configure-structuremap-for-asp-net-mvc/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Convert the interface of a class into another interface that the clients expects(Adapter Pattern)</title>
		<link>/convert-the-interface-of-a-class-into-another-interface-that-the-clients-expectsadapter-pattern/</link>
		<comments>/convert-the-interface-of-a-class-into-another-interface-that-the-clients-expectsadapter-pattern/#respond</comments>
		<pubDate>Wed, 13 Apr 2016 18:07:29 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Dependency injection]]></category>
		<category><![CDATA[Design Patterns]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=576</guid>
		<description><![CDATA[<p>Adapter pattern: Advantages of using a Adaptor pattern: Adapter pattern lets classes work together that couldn&#8217;t otherwise because of incompatible interfaces. The code is more maintainable. most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/convert-the-interface-of-a-class-into-another-interface-that-the-clients-expectsadapter-pattern/">Convert the interface of a class into another interface that the clients expects(Adapter Pattern)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img class="aligncenter wp-image-575" src="http://blog-goel.rhcloud.com/wp-content/uploads/2016/04/AdapterPattern-300x155.jpg" alt="Adapter Pattern" width="656" height="339" srcset="/wp-content/uploads/2016/04/AdapterPattern-300x155.jpg 300w, /wp-content/uploads/2016/04/AdapterPattern.jpg 639w" sizes="(max-width: 656px) 100vw, 656px" /></p>
<p><strong>Adapter pattern:</strong></p>
<pre class="brush: csharp; title: ; notranslate">
    class Program
    {
        static IExpectedInterface dependency = new Adapter(new TargetClass());
        static void Main(string[] args)
        {
            dependency.MethodA();
        }
    }
    public interface IExpectedInterface
    {
        void MethodA();
    }
    public class Adapter : IExpectedInterface
    {
        public Adapter(TargetClass target)
        {
            this.target = target;
        }
        public void MethodA()
        {
            target.MethodB();
        }
        private TargetClass target;
    }
    public class TargetClass
    {
        public void MethodB()
        {
        }
    }
</pre>
<p><strong>Advantages of using a Adaptor pattern:</strong></p>
<ul>
<li>Adapter pattern lets classes work together that couldn&#8217;t otherwise because of incompatible interfaces.</li>
<li>The code is more maintainable.</li>
<li>most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code.</li>
</ul>
<p>The post <a rel="nofollow" href="/convert-the-interface-of-a-class-into-another-interface-that-the-clients-expectsadapter-pattern/">Convert the interface of a class into another interface that the clients expects(Adapter Pattern)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/convert-the-interface-of-a-class-into-another-interface-that-the-clients-expectsadapter-pattern/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: www.ajitgoel.net @ 2017-09-27 03:24:13 by W3 Total Cache -->