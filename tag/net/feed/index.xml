<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>.Net &#8211; So many manuals, so little time</title>
	<atom:link href="/tag/net/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>So many manuals, so little time</description>
	<lastBuildDate>Sun, 03 Sep 2017 21:30:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>FizzBuzz using C# yield</title>
		<link>/fizzbuzz-using-c-yield/</link>
		<comments>/fizzbuzz-using-c-yield/#respond</comments>
		<pubDate>Tue, 12 Jul 2016 07:03:39 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=1170</guid>
		<description><![CDATA[<p>Yield. Yield has two great uses, a. It helps to provide custom iteration without creating temp collections. b. It helps to do state-full iteration.</p>
<p>The post <a rel="nofollow" href="/fizzbuzz-using-c-yield/">FizzBuzz using C# yield</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Yield</strong>.<br />
Yield has two great uses,<br />
a. It helps to provide custom iteration without creating temp collections.<br />
b. It helps to do state-full iteration. </p>
<pre class="brush: csharp; title: ; notranslate">
[TestClass]
public class FizzBuzzTest
{
    [TestMethod]
    public void Test1()
    {
        var iEnumerableString = new FizzBuzz().GenerateFizzBuzzUpto(100);
        var list = iEnumerableString.ToList();
        Assert.IsTrue(list[0] == &quot;Fizz:3&quot;);
        Assert.IsTrue(list[1] == &quot;Buzz:5&quot;);
        Assert.IsTrue(list[6] == &quot;FizzBuzz:15&quot;);
    }
}
public class FizzBuzz
{
    public IEnumerable&lt;string&gt; GenerateFizzBuzzUpto(int numberUpto)
    {
        for (var counter = 1; counter &lt; numberUpto; counter++)
        {
            if (counter%3 == 0 &amp;&amp; counter%5 == 0)
            {
                yield return $&quot;FizzBuzz:{counter}&quot;;
            }
            if (counter % 3 == 0)
            {
                yield return $&quot;Fizz:{counter}&quot;;
            }
            if (counter % 5 == 0)
            {
                yield return $&quot;Buzz:{counter}&quot;;
            }
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/fizzbuzz-using-c-yield/">FizzBuzz using C# yield</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/fizzbuzz-using-c-yield/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>&#8220;Develop something useful in under 100 lines of code&#8221; contest-Improved version</title>
		<link>/develop-something-useful-100-lines-code-contest-improved-version/</link>
		<comments>/develop-something-useful-100-lines-code-contest-improved-version/#respond</comments>
		<pubDate>Tue, 12 Jul 2016 05:39:52 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=1122</guid>
		<description><![CDATA[<p>My article here was well received. Various people pointing out several flaws in the application. Some of these points that were discussed were: a. Should the application use decimal instead of double since it is a financial application? Answer: The application has been changed to use decimals to calculate the monthly payment amount, Interest amount, [&#8230;]</p>
<p>The post <a rel="nofollow" href="/develop-something-useful-100-lines-code-contest-improved-version/">&#8220;Develop something useful in under 100 lines of code&#8221; contest-Improved version</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>My <a href="/2016/07/04/develop-something-useful-in-under-100-lines-of-code-contest/">article</a> here was well received. Various people pointing out several flaws in the application. Some of these points that were discussed were:</p>
<p><strong>a. Should the application use decimal instead of double since it is a financial application?</strong><br />
<strong>Answer:</strong> The application has been changed to use decimals to calculate the monthly payment amount, Interest amount, total interest amount. However based on the <a href="http://stackoverflow.com/questions/6425501/is-there-a-math-api-for-powdecimal-decimal/6426826#6426826">article </a> here, &#8220;the results when computed in doubles are going to be off by a few billionths of a penny one way or the other&#8221;. I therefore believe that I need to find a actual use case where using a decimal produced a result that was more correct than using a decimal. </p>
<p><strong>b. The application will not behave correctly when the &#8220;loan Date&#8221; is passed with a &#8220;DateTime.MaxValue&#8221; value.</strong><br />
<strong>Answer:</strong> This has been fixed and a unit test case added for the same.  </p>
<p><strong>c. The application needs to consider business rules related to &#8220;loan date&#8221; and &#8220;Loan Period in years&#8221;</strong><br />
<strong>Answer:</strong> This has been fixed and two unit test cases added for the same. </p>
<p><strong>d. What advantages will the system get if the return type of the Get function is a &#8220;IList&#8221; instead of a &#8220;List&#8221;?</strong><br />
<strong>Answer:</strong> This has been fixed in the application. The advantages that we get is that the AmortizationSchedule.Get and IAmortizationSchedule.Get signature does not need to change when the internals of the AmortizationSchedule.Get method is changed to return a collection that implements a IList (example return a Array instead of a List collection). </p>
<p><strong>e. How will you optimize the creation of a the List class on line 30? Will it make sense to pass the created object from the client application if the creation of the list instance is expensive?</strong><br />
<strong>Answer:</strong> If the List creation is an expensive operation then we can consider using the <strong>Object pooling design pattern </strong>in the application.<br />
The <strong>Object pool design pattern</strong> is a creational design pattern that can improve performance when working with classes that are slow to instantiate. Rather than constructing new objects, reusable objects are retrieved from, and released to, a pool as required.<br />
An example implementation is listed <a href="http://www.blackwasp.co.uk/ObjectPool.aspx">here</a>. </p>
<p><strong>f. Will the application need to take care of multiple processes creating &#8220;Amortization Schedule&#8221;? If yes then how will you change the application?</strong><br />
<strong>Answer:</strong> It was decided that the application does not need to change to take care of multiple processes creating the &#8220;Amortization Schedule&#8221;. </p>
<p><strong>g. Why was the &#8220;IAmortizationSchedule&#8221; interface created? It is not used anywhere in the application</strong><br />
<strong>Answer:</strong> This is true, the &#8220;IAmortizationSchedule&#8221; interface is not used in the application but I always create an interface because it helps later down the road when I need to write unit tests by mock the various parts of the application. </p>
<p><strong>h. Is there a possibility that the &#8220;toThePowerOfVariable&#8221; variable on line 22 will become 1? What happens on line 23 if the &#8220;toThePowerOfVariable&#8221; variable becomes 1?<br />
</strong><strong>Answer:</strong> It was decided that there is no possibility of the &#8220;toThePowerOfVariable&#8221; variable on line 22 becoming 1. If the &#8220;toThePowerOfVariable&#8221; variable becomes 1, no &#8220;DivideByZeroException or other exception will occur. </p>
<p>Here is the changed application:</p>
<pre class="brush: csharp; highlight: [3,10,14,15,16,27,28,29,30]; title: ; notranslate">
public class AmortizationSchedule: IAmortizationSchedule
{
    public IList&lt;AmortizationScheduleRow&gt; Get(double annualPercentageRate, 
        double loanAmount, int loanPeriodInYears, DateTime loanStartDate)
    {
        if (annualPercentageRate &lt;= 0 || 
         loanAmount &lt;= 0 || 
         loanPeriodInYears &lt;= 0 || 
         loanStartDate &lt;= DateTime.MinValue || 
         loanStartDate == DateTime.MaxValue)
        {
            throw new ArgumentException(&quot;Invalid arguments&quot;);
        }
        //If the code below does not throw an exception then 
        //the &quot;loanStartDate&quot; has been validated against the &quot;loanPeriodInYears&quot;
        DateTime addYears = loanStartDate.AddYears(loanPeriodInYears);
        
        #region Calculate monthly payment rounded to 2 digits
        const int NoOfMonthsInYear = 12;
        var loanPeriodInMonths = loanPeriodInYears * NoOfMonthsInYear;
        var effectiveInterestRateInDouble = annualPercentageRate / (NoOfMonthsInYear * 100);
        var toThePowerOfVariable = Math.Pow(1 + effectiveInterestRateInDouble, -loanPeriodInMonths);
        var monthlyPayment = (decimal) (loanAmount * (effectiveInterestRateInDouble / (1 - toThePowerOfVariable)));
        #endregion

        #region Calculate payment schedule based on monthly payment and loan start date
        //Initialize the collection(for performance) based on the 
        //no of elements that it is supposed to hold
        var amortizationSchedule = 
        new List&lt;AmortizationScheduleRow&gt;(loanPeriodInMonths);
        var currentMonthCounter = loanStartDate.AddMonths(1);
        var currentBalance = (decimal) loanAmount;
        decimal totalInterestAmount = 0;
        for (var counter = 0; counter &lt; loanPeriodInMonths; counter++)
        {
            var interestAmount = (decimal) (effectiveInterestRateInDouble * (double) currentBalance);
            totalInterestAmount = (totalInterestAmount + interestAmount);
            var amortizationScheduleRow = new AmortizationScheduleRow
            {
                Date = currentMonthCounter,
                MonthlyPaymentAmount = monthlyPayment,
                InterestAmount = interestAmount,
                TotalInterestAmount = totalInterestAmount
            };
            amortizationSchedule.Add(amortizationScheduleRow);

            currentBalance = currentBalance - amortizationScheduleRow.GetPrincipalAmount();
            currentMonthCounter = currentMonthCounter.AddMonths(1);
        }
        #endregion
        return amortizationSchedule;
    }
}
</pre>
<pre class="brush: csharp; highlight: [3,8,12,13,17,18,22,23]; title: ; notranslate">
public interface IAmortizationSchedule
{
    IList&lt;AmortizationScheduleRow&gt; Get(double annualPercentageRate, double loanAmount, 
        int loanPeriodInYears, DateTime loanStartDate);
}
public class AmortizationScheduleRow
{
    public decimal GetMonthlyPaymentAmount()
    {
        return Math.Round(MonthlyPaymentAmount, 2, MidpointRounding.AwayFromZero);
    }
    public decimal MonthlyPaymentAmount { private get; set; }
    public decimal GetInterestAmount()
    {
        return Math.Round(InterestAmount, 2, MidpointRounding.AwayFromZero);
    }
    public decimal InterestAmount { private get; set; }
    public decimal GetTotalInterestAmount()
    {
        return Math.Round(TotalInterestAmount, 2, MidpointRounding.AwayFromZero);
    }
    public decimal TotalInterestAmount { private get; set; }
    public decimal GetPrincipalAmount()
    {
        var principalAmount = MonthlyPaymentAmount - InterestAmount;
        return Math.Round(principalAmount, 2, MidpointRounding.AwayFromZero);
    }
    public string GetDate()
    {
        return Date.ToString(&quot;MMM yyyy&quot;);
    }
    public DateTime Date { private get; set; }
}
</pre>
<pre class="brush: csharp; highlight: [14,15,19,22,24,26,55,56,57,58,59,60,61,62,63,64,65,66,67,68]; title: ; notranslate">
 [TestClass]
public class AmortizationScheduleTester
{
    const double annualPercentageRate = 3.5;
    const double loanAmount = 300000;
    const int loanPeriodInYears = 15;
    readonly DateTime loanStartDate = new DateTime(2016, 7, 1);
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest()
    {
        const int NoOfMonthsInYear = 12;
        var monthlyPaymentSchedule = new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
            loanPeriodInYears, loanStartDate);
        Assert.IsFalse(monthlyPaymentSchedule == null);
        Assert.IsFalse(monthlyPaymentSchedule.Count &gt; 1);
        var secondMonthPaymentSchedule = monthlyPaymentSchedule[1];
        Assert.AreEqual(monthlyPaymentSchedule.Count, 15 * NoOfMonthsInYear);
        Assert.AreEqual(secondMonthPaymentSchedule.GetMonthlyPaymentAmount(), 
        (decimal) 2144.65);
        Assert.AreEqual(secondMonthPaymentSchedule.GetDate(), &quot;Sep 2016&quot;);
        Assert.AreEqual(secondMonthPaymentSchedule.GetInterestAmount(), 
        (decimal) 871.30);
        Assert.AreEqual(secondMonthPaymentSchedule.GetTotalInterestAmount(), 
        (decimal) 1746.30);
        Assert.AreEqual(secondMonthPaymentSchedule.GetPrincipalAmount(), 
        (decimal) 1273.35);
    }
    [ExpectedException(typeof(ArgumentException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest1()
    {
        new AmortizationSchedule().Get(0, loanAmount,
            loanPeriodInYears, loanStartDate);
    }
    [ExpectedException(typeof(ArgumentException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest2()
    {
        new AmortizationSchedule().Get(annualPercentageRate, 0,
            loanPeriodInYears, loanStartDate);
    }
    [ExpectedException(typeof(ArgumentException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest3()
    {
        new AmortizationSchedule().Get(annualPercentageRate, loanAmount, 0, loanStartDate);
    }
    [ExpectedException(typeof(ArgumentException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest4()
    {
        new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
            loanPeriodInYears, DateTime.MinValue);
    }
    [ExpectedException(typeof(ArgumentException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest5()
    {
        new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
            loanPeriodInYears, DateTime.MaxValue);
    }
    [ExpectedException(typeof(ArgumentOutOfRangeException))]
    [TestMethod]
    public void GetAmortizationScheduleExceptionTest6()
    {
        new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
            loanPeriodInYears, DateTime.MaxValue.AddYears(-1));
    }
}
</pre>
<p><a href="/wp-content/uploads/2016/07/UnitTestProject-Improved.zip">Unit Test Project-Improved</a></p>
<p>The post <a rel="nofollow" href="/develop-something-useful-100-lines-code-contest-improved-version/">&#8220;Develop something useful in under 100 lines of code&#8221; contest-Improved version</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/develop-something-useful-100-lines-code-contest-improved-version/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Concurrent and immutable Collections in C#-Primer</title>
		<link>/concurrent-collections-in-c-primer/</link>
		<comments>/concurrent-collections-in-c-primer/#respond</comments>
		<pubDate>Sun, 10 Jul 2016 20:04:03 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=1096</guid>
		<description><![CDATA[<p>Concurrent(or Threadsafe) collections allow multiple threads to update them simultaneously in a safe way. Concurrent collections are more efficient than implementing a regular collection with a lock. An immutable collection cannot actually be modified. Instead, to modify an immutable collection, you create a new collection that represents the modified collection. The .Net framework has several [&#8230;]</p>
<p>The post <a rel="nofollow" href="/concurrent-collections-in-c-primer/">Concurrent and immutable Collections in C#-Primer</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Concurrent(or Threadsafe) collections</strong> allow multiple threads to update them simultaneously in a safe way. Concurrent collections are more efficient than implementing a regular collection with a lock.<br />
An <strong>immutable collection</strong> cannot actually be modified. Instead, to modify an immutable collection, you create a new collection that represents the modified collection. </p>
<p>The .Net framework has several different collection types.<br />
<strong>ImmutableList&lt;T&gt;</strong> Use this data structure when<br />
a. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. They allow indexing like Lists but they have lower performance than Lists.</p>
<p><strong>ImmutableStack&lt;T&gt;</strong> Use this data structure when<br />
a. you need a first-in, first-out data structure<br />
b. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. ImmutableStack have lower performance than Stack data structures.</p>
<p><strong>ImmutableQueue&lt;T&gt;</strong> Use this data structure when<br />
a. you need a first-in, last-out data structure<br />
b. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. ImmutableQueue have lower performance than Queue data structures.</p>
<p><strong>ImmutableDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items. Use this type when you<br />
a. need a key-value collection of items.<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items in ImmutableDictionary have an unpredictable order.<br />
Performance of ImmutableDictionary is faster than ImmutableSortedDictionary. </p>
<p><strong>ImmutableSortedDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items sorted by key. Use this type when you<br />
a. need a key-value collection of items.<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items are sorted in the collection.</p>
<p><strong>ImmutableHashSet&lt;T&gt;</strong> is just a collection of unique items. Use this type when you<br />
a. do not need to store duplicates<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items in the ImmutableHashSet have an unpredictable order.<br />
Performance of ImmutableHashSet is faster than ImmutableSortedHashSet. </p>
<p><strong>ImmutableSortedSet&lt;T&gt;</strong> is a sorted collection of unique items. Use this type when you<br />
a. do not need to store duplicates<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items are sorted in the collection.</p>
<p><strong>ConcurrentDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items. Use this type when you<br />
a. need a key-value collection of items.<br />
b. can be accessed by multiple threads safely.<br />
Use the ConcurrentDictionary&lt;T, TValue&gt; when you have multiple threads reading and writing to the shared collection. If the updates are more rare then the ImmutableDictionary&lt;T, TValue&gt; is a better choice. </p>
<p>The post <a rel="nofollow" href="/concurrent-collections-in-c-primer/">Concurrent and immutable Collections in C#-Primer</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/concurrent-collections-in-c-primer/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Encapsulate and vary algorithm from the client that uses it(Strategy Pattern)</title>
		<link>/encapsulate-vary-algorithm-client-uses-itstrategy-pattern/</link>
		<comments>/encapsulate-vary-algorithm-client-uses-itstrategy-pattern/#respond</comments>
		<pubDate>Sun, 10 Jul 2016 05:35:39 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Design Patterns]]></category>
		<category><![CDATA[OOAD]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=604</guid>
		<description><![CDATA[<p>Strategy pattern is a software design pattern that enables an algorithm&#8217;s behavior to be selected at runtime. It a. defines a family of algorithms, b. encapsulates each algorithm, and c. makes the algorithms interchangeable within that family. Example:</p>
<p>The post <a rel="nofollow" href="/encapsulate-vary-algorithm-client-uses-itstrategy-pattern/">Encapsulate and vary algorithm from the client that uses it(Strategy Pattern)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Strategy pattern</strong> is a software design pattern that enables an algorithm&#8217;s behavior to be selected at runtime. It<br />
a. defines a family of algorithms,<br />
b. encapsulates each algorithm, and<br />
c. makes the algorithms interchangeable within that family.</p>
<p><strong>Example:</strong><br />
<img class="aligncenter wp-image-1071 size-full" src="/wp-content/uploads/2016/07/StrategyDesignPattern.jpg" alt="Strategy Design Pattern" width="882" height="370" srcset="/wp-content/uploads/2016/07/StrategyDesignPattern.jpg 882w, /wp-content/uploads/2016/07/StrategyDesignPattern-300x126.jpg 300w, /wp-content/uploads/2016/07/StrategyDesignPattern-768x322.jpg 768w" sizes="(max-width: 882px) 100vw, 882px" /></p>
<pre class="brush: csharp; highlight: [11,12,13,25,26,27,28,31,32,41,42,43,44,45]; title: ; notranslate">
using System.Collections.Generic;

class StrategyDesignPatternClient
{
    static void Main()
    {
        var sortedList = new SortedList();
        sortedList.Add(&quot;name 1&quot;);
        sortedList.Add(&quot;name 2&quot;);
        sortedList.Add(&quot;name 3&quot;);
        //The client passes the &quot;sort strategy&quot; to the SortedList 
        //so the SortedList can use that passed strategy to sort the internal list
        sortedList.SetSortStrategy(new QuickSort());
        sortedList.Sort();
    }
}
public class SortedList
{
    private List&amp;amp;lt;string&amp;amp;gt; list = new List&amp;amp;lt;string&amp;amp;gt;();
    private SortStrategy sortstrategy;
    public void SetSortStrategy(SortStrategy sortstrategy)
    {
        this.sortstrategy = sortstrategy;
    }
    public void Add(string name)
    {
        list.Add(name);
    }
    public void Sort()
    {
        //Ask the &quot;SortStrategy&quot; class to sort the list. 
        sortstrategy.Sort(list);
    }
}
public interface SortStrategy
{
    void Sort(List&amp;amp;lt;string&amp;amp;gt; list);
}
public class QuickSort : SortStrategy
{
    public void Sort(List&amp;amp;lt;string&amp;amp;gt; list)
    {
        // Default is Quicksort
        list.Sort(); 
    }
}
public class ShellSort : SortStrategy
{
    public void Sort(List&amp;amp;lt;string&amp;amp;gt; list)
    {
        // ShellSort the &quot;list&quot; collection here. 
    }
}
public class MergeSort : SortStrategy
{
    public void Sort(List&amp;amp;lt;string&amp;amp;gt; list)
    {
        // MergeSort the &quot;list&quot; collection here. 
    }
}
</pre>
<p>The post <a rel="nofollow" href="/encapsulate-vary-algorithm-client-uses-itstrategy-pattern/">Encapsulate and vary algorithm from the client that uses it(Strategy Pattern)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/encapsulate-vary-algorithm-client-uses-itstrategy-pattern/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Use ProtoBuf.Net to improve serialization performance</title>
		<link>/use-protobuf-net-to-improve-serialization-performance/</link>
		<comments>/use-protobuf-net-to-improve-serialization-performance/#respond</comments>
		<pubDate>Sun, 10 Jul 2016 00:53:36 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Performance Optimization]]></category>
		<category><![CDATA[ProtoBuf.Net]]></category>

		<guid isPermaLink="false">/?p=1010</guid>
		<description><![CDATA[<p>Our application relied on data that did not change often. It had therefore implemented a solution that cached this data as xml files. These files were written to the web server on the first request and subsequently read whenever they were needed. Some of the problems that arose due to this was: a. Since the application was load [&#8230;]</p>
<p>The post <a rel="nofollow" href="/use-protobuf-net-to-improve-serialization-performance/">Use ProtoBuf.Net to improve serialization performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Our application relied on data that did not change often. It had therefore implemented a solution that cached this data as xml files. These files were written to the web server on the first request and subsequently read whenever they were needed.<br />
Some of the problems that arose due to this was:<br />
a. Since the application was load balanced, a web server servicing a web request was not guaranteed to serve the next web request. This lead to the data in the various web servers quickly getting out of sync.<br />
b. Our application was very slow. Profiling the application showed that showed that reading and writing(i.e serialization and de-serialization) the XML cache files was one of the biggest bottleneck in the application.<br />
XML serialization is one of the slowest serializationde-serialization formats in the .Net framework. See the excellent <a href="http://maxondev.com/serialization-performance-comparison-c-net-formats-frameworks-xmldatacontractserializer-xmlserializer-binaryformatter-json-newtonsoft-servicestack-text/">article</a> where Maxim Novak compares the various types of serialization in the .Net framework.</p>
<p>We therefore decided to change the serialization format from XML to <a href="https://github.com/mgravell/protobuf-net">ProtoBuf.Net</a>. Protobuf-net is a contract based serializer for .NET code, that writes data in the &#8220;protocol buffers&#8221; serialization format engineered by Google. This framework component is written by Marc Gravell, considered as a .Net guru.<br />
We also decided to change the application to write the cache files to a single file server and create the cache files in a background thread. I will write a separate article for the same in the future.<br />
Changing the application to ProtoBuf.Net protocol was pretty straightforward.<br />
a. Use Nuget to install ProtoBuf.Net framework component.</p>
<pre class="brush: csharp; title: ; notranslate">
Install-Package protobuf-net
</pre>
<p>b. Add [ProtoContract] attribute to each class that needs to be serialized and [ProtoMember] Attribute with a unique integer to identify each member that needs to be serialized.</p>
<pre class="brush: csharp; highlight: [2,5,7]; title: ; notranslate">
using ProtoBuf;
[ProtoContract]
class Person 
{
    [ProtoMember(1)]
    public int Id {get;set;}
    [ProtoMember(2)]
    public string Name {get;set:}
}
</pre>
<p>c. Serialize and deserialize your data</p>
<pre class="brush: csharp; highlight: [3]; title: ; notranslate">
using (var file = File.Create(&quot;person.bin&quot;)) 
{
    Serializer.Serialize(file, person);
}
</pre>
<pre class="brush: csharp; highlight: [4]; title: ; notranslate">
Person person;
using (var file = File.OpenRead(&quot;person.bin&quot;)) 
{
    person = Serializer.Deserialize&lt;Person&gt;(file);
}
</pre>
<p>As you can see from the charts below, the change from<br />
a. XML to ProtoBuf.Net serialization<br />
b. caching the files in a single file server instead of multiple file servers<br />
c. offloading the work of generating the cache files to a background thread<br />
was a huge success.</p>
<p><img class="aligncenter wp-image-992 size-full" src="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1.png" alt="ProtoBuf.NetPerformanceImprovement-Part1" width="929" height="569" srcset="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1.png 929w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1-300x184.png 300w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part1-768x470.png 768w" sizes="(max-width: 929px) 100vw, 929px" /></p>
<p>&nbsp;</p>
<p><img class="aligncenter wp-image-993 size-full" src="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2.png" alt="ProtoBuf.NetPerformanceImprovement-Part2" width="928" height="568" srcset="/wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2.png 928w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2-300x184.png 300w, /wp-content/uploads/2016/07/ProtoBuf.NetPerformanceImprovement-Part2-768x470.png 768w" sizes="(max-width: 928px) 100vw, 928px" /></p>
<p><strong>Using ProtoBuf.Net Serialization:</strong> The .Net profiler shows &#8220;HotSpots&#8221; due to serialization and de-serialization are much reduced. File sizes are also much reduced.</p>
<p><img class="aligncenter wp-image-1016" src="/wp-content/uploads/2016/07/ProtoBufNetSerialization1-300x218.jpg" alt="ProtoBufNetSerialization1" width="384" height="279" /></p>
<p><img class="aligncenter wp-image-1017" src="/wp-content/uploads/2016/07/ProtoBufNetSerialization2.jpg" alt="ProtoBufNetSerialization2" width="312" height="123" /></p>
<p><strong>Using XML Serialization:</strong> The .Net profiler shows high CPU usage i.e &#8220;HotSpots&#8221; due to XML serialization and de-serialization. File sizes are also much larger.</p>
<p><img class="aligncenter wp-image-1017" src="/wp-content/uploads/2016/07/XMLSerialization1-300x217.jpg" alt="XMLSerialization1" width="300" height="217" /></p>
<p><img class="wp-image-1017 aligncenter" src="/wp-content/uploads/2016/07/XMLSerialization2.jpg" alt="XMLSerialization2" width="278" height="103" /></p>
<p>The post <a rel="nofollow" href="/use-protobuf-net-to-improve-serialization-performance/">Use ProtoBuf.Net to improve serialization performance</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/use-protobuf-net-to-improve-serialization-performance/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>&#8220;Develop something useful in under 100 lines of code&#8221; contest.</title>
		<link>/develop-something-useful-in-under-100-lines-of-code-contest/</link>
		<comments>/develop-something-useful-in-under-100-lines-of-code-contest/#respond</comments>
		<pubDate>Mon, 04 Jul 2016 20:53:51 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=930</guid>
		<description><![CDATA[<p>One of my friends was recently asked to write the coolest/cleverest/most creative application in 100 lines of code or less. Any language could be used. It just needs to be creative, legible and easy enough to understand. Here is my attempt. The program is a loan payment schedule calculator. The formula to calculate loan payments [&#8230;]</p>
<p>The post <a rel="nofollow" href="/develop-something-useful-in-under-100-lines-of-code-contest/">&#8220;Develop something useful in under 100 lines of code&#8221; contest.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>One of my friends was recently asked to write the coolest/cleverest/most creative application in 100 lines of code or less.  Any language could be used. It just needs to be creative, legible and easy enough to understand. </p>
<p>Here is my attempt. The program is a loan payment schedule calculator.<br />
The formula to calculate loan payments is M = P * ( J / (1 &#8211; (1 + J) ^ -N)).<br />
where<br />
M = payment amount<br />
P = principal, meaning the amount of money borrowed<br />
J = effective interest rate. This is not the annual interest rate.<br />
N = total number of payments<br />
For more details see <a href="http://www.wikihow.com/Calculate-Loan-Payments">here </a>.<br />
I have also written several unit tests since I just do not like writing any code without unit tests. The actual code is just 30 lines and the remaining is all unit tests.<br />
I have used the <a href="https://msdn.microsoft.com/en-us/library/system.midpointrounding(v=vs.110).aspx">MidpointRounding.AwayFromZero</a> enumeration to round a double to a number to two decimal points.<br />
</p>
<pre class="brush: csharp; highlight: [18,19,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]; title: ; notranslate">
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
namespace UnitTestProject
{
    public class AmortizationSchedule : IAmortizationSchedule
    {
        public List&lt;AmortizationScheduleRow&gt; Get(double annualPercentageRate,
             double loanAmount, int loanPeriodInYears, DateTime loanStartDate)
        {
            if (annualPercentageRate &lt;= 0 || loanAmount &lt;= 0 || loanPeriodInYears &lt;= 0 ||
                loanStartDate &lt;= DateTime.MinValue)
            {
                throw new ArgumentException(&quot;Invalid arguments&quot;);
            }

            #region Calculate monthly payment
            const int NoOfMonthsInYear = 12;
            var loanPeriodInMonths = loanPeriodInYears * NoOfMonthsInYear;
            var effectiveInterestRate = annualPercentageRate / (NoOfMonthsInYear * 100);
            var toThePowerOfVariable = Math.Pow(1 + effectiveInterestRate, -loanPeriodInMonths);
            var monthlyPayment = (loanAmount * (effectiveInterestRate / (1 - toThePowerOfVariable)));
            #endregion

            #region Calculate payment schedule based on monthly payment and loan start date
            var amortizationSchedule = new List&lt;AmortizationScheduleRow&gt;();
            var currentMonthCounter = loanStartDate.AddMonths(1);
            var currentBalance = loanAmount;
            double totalInterestAmount = 0;
            for (var counter = 0; counter &lt; loanPeriodInMonths; counter++)
            {
                var interestAmount = effectiveInterestRate * currentBalance;
                totalInterestAmount = totalInterestAmount + interestAmount;
                var amortizationScheduleRow = new AmortizationScheduleRow
                {
                    Date = currentMonthCounter,
                    MonthlyPaymentAmount = monthlyPayment,
                    InterestAmount = interestAmount,
                    TotalInterestAmount = totalInterestAmount
                };
                amortizationSchedule.Add(amortizationScheduleRow);
                currentBalance = currentBalance - amortizationScheduleRow.GetPrincipalAmount();
                currentMonthCounter = currentMonthCounter.AddMonths(1);
            }
            #endregion
            return amortizationSchedule;
        }
    }
    public interface IAmortizationSchedule
    {
        List&lt;AmortizationScheduleRow&gt; Get(double annualPercentageRate, double loanAmount, int loanPeriodInYears, DateTime loanStartDate);
    }
    public class AmortizationScheduleRow
    {
        public double GetMonthlyPaymentAmount()
        {
            return Math.Round(MonthlyPaymentAmount, 2, MidpointRounding.AwayFromZero);
        }
        public double MonthlyPaymentAmount { private get; set; }
        public double GetInterestAmount()
        {
            return Math.Round(InterestAmount, 2, MidpointRounding.AwayFromZero);
        }
        public double InterestAmount { private get; set; }
        public double GetTotalInterestAmount()
        {
            return Math.Round(TotalInterestAmount, 2, MidpointRounding.AwayFromZero);
        }
        public double TotalInterestAmount { private get; set; }
        public double GetPrincipalAmount()
        {
            var principalAmount = MonthlyPaymentAmount - InterestAmount;
            return Math.Round(principalAmount, 2, MidpointRounding.AwayFromZero);
        }
        public string GetDate()
        {
            return Date.ToString(&quot;MMM yyyy&quot;);
        }
        public DateTime Date { private get; set; }
    }
    [TestClass]
    public class AmortizationScheduleTester
    {
        const double annualPercentageRate = 3.5;
        const double loanAmount = 300000;
        const int loanPeriodInYears = 15;
        readonly DateTime loanStartDate = new DateTime(2016, 7, 1);
        [TestMethod]
        public void GetAmortizationScheduleExceptionTest()
        {
            const int NoOfMonthsInYear = 12;
            var monthlyPaymentSchedule = new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
                loanPeriodInYears, loanStartDate);
            var secondMonthPaymentSchedule = monthlyPaymentSchedule[1];
            Assert.AreEqual(monthlyPaymentSchedule.Count, 15 * NoOfMonthsInYear);
            Assert.AreEqual(secondMonthPaymentSchedule.GetMonthlyPaymentAmount(), 2144.65);
            Assert.AreEqual(secondMonthPaymentSchedule.GetDate(), &quot;Sep 2016&quot;);
            Assert.AreEqual(secondMonthPaymentSchedule.GetInterestAmount(), 871.30);
            Assert.AreEqual(secondMonthPaymentSchedule.GetTotalInterestAmount(), 1746.30);
            Assert.AreEqual(secondMonthPaymentSchedule.GetPrincipalAmount(), 1273.35);
        }
        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void GetAmortizationScheduleExceptionTest1()
        {
            new AmortizationSchedule().Get(0, loanAmount,
                loanPeriodInYears, loanStartDate);
        }

        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void GetAmortizationScheduleExceptionTest2()
        {
            new AmortizationSchedule().Get(annualPercentageRate, 0,
                loanPeriodInYears, loanStartDate);
        }
        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void GetAmortizationScheduleExceptionTest3()
        {
            new AmortizationSchedule().Get(annualPercentageRate, loanAmount, 0, loanStartDate);
        }
        [ExpectedException(typeof(ArgumentException))]
        [TestMethod]
        public void GetAmortizationScheduleExceptionTest4()
        {
            new AmortizationSchedule().Get(annualPercentageRate, loanAmount,
                loanPeriodInYears, DateTime.MinValue);
        }
    }
}
</pre>
<p><a href="/wp-content/uploads/2016/07/UnitTestProject.zip">Download Solution</a></p>
<p>The post <a rel="nofollow" href="/develop-something-useful-in-under-100-lines-of-code-contest/">&#8220;Develop something useful in under 100 lines of code&#8221; contest.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/develop-something-useful-in-under-100-lines-of-code-contest/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Exception handling in Async methods</title>
		<link>/exception-handling-in-async-methods/</link>
		<comments>/exception-handling-in-async-methods/#respond</comments>
		<pubDate>Thu, 30 Jun 2016 05:07:59 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[Asynchronous Programming]]></category>
		<category><![CDATA[C#]]></category>

		<guid isPermaLink="false">/?p=908</guid>
		<description><![CDATA[<p>Scenario 1: Take the following method for example: Scenario 2.a: We can change the code in Scenario 1 to move the exception handling inside the AsyncTaskWithAPossibleException method. Scenario 2.b.: : Instead of handling the exception in the AsyncTaskWithAPossibleException method, we can also change the return type from void to Task(For a Async method, it is [&#8230;]</p>
<p>The post <a rel="nofollow" href="/exception-handling-in-async-methods/">Exception handling in Async methods</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Scenario 1: </strong>Take the following method for example:</p>
<pre class="brush: csharp; highlight: [9,10,11,16]; title: ; notranslate">
public async void AsyncTaskWithAPossibleException()
{     
    //code that generates exception
}
public void MethodCallingAsyncTaskMethod()
{
    try
    {
        //Exceptions thrown by the AsyncTaskWithAPossibleException cannot be caught 
        //using the try catch block. It might crash the running process in most 
        //scenarios. 
        AsyncTaskWithAPossibleException();
    }
    catch (Exception)
    {
        // exception won't be caught
    }
}
</pre>
<p><strong>Scenario 2.a: </strong> We can change the code in Scenario 1 to move the exception handling inside the AsyncTaskWithAPossibleException method. </p>
<pre class="brush: csharp; highlight: [3,4,5,6,7,8,9,10]; title: ; notranslate">
public async void AsyncTaskWithAPossibleException()
{
    try
    {
        //code that generates exception
    }
    catch(Exception)
    {
        // Handle exception
    }
}
public void MethodCallingAsyncTaskMethod()
{
    AsyncTaskWithAPossibleException();
}
</pre>
<p><strong>Scenario 2.b.: </strong>: Instead of handling the exception in the AsyncTaskWithAPossibleException method, we can also change the return type from void to Task(For a Async method, it is recommended to return a Task instead of a void).<br />
Exception raised in the AsyncTaskWithAPossibleException method will be saved in the returning Task instance. When we await the AsyncTaskWithAPossibleException method, the exception saved in the Task will get rethrown with its stack trace preserved.</p>
<pre class="brush: csharp; highlight: [1,5,9,13]; title: ; notranslate">
public async Task AsyncTaskWithAPossibleException()
{
    //code that generates exception
}
public async Task MethodCallingAsyncTaskMethod()
{
    try
    {
        await AsyncTaskWithAPossibleException();
    }
    catch (Exception)
    {
        // exception is caught with stack trace preserved
    }
}
</pre>
<p><strong>Scenario 3: </strong> If for some reason we don’t await the Task, we can define a continuation when the Task ends with the faulted state.</p>
<pre class="brush: csharp; highlight: [1,5,7,8,9,10,11]; title: ; notranslate">
public async Task AsyncTaskWithAPossibleException()
{
    //code that generates exception
}
public void MethodCallingAsyncTaskMethod()
{
    var task = AsyncTaskWithAPossibleException();
    task.ContinueWith(t =&gt;
    {
        //  handle t.Exception
    }, TaskContinuationOptions.OnlyOnFaulted);
}
</pre>
<p><strong>Scenario 4: </strong> If for some reason we don’t await the Task and we do not define a continuation when the Task ends with the faulted state, the exception saved inside the instance will be raised eventually when the GC collects the object. You can catch that silent exception using the TaskScheduler event UnobservedTaskException. </p>
<p>The post <a rel="nofollow" href="/exception-handling-in-async-methods/">Exception handling in Async methods</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/exception-handling-in-async-methods/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C# Tuple</title>
		<link>/c-tuple/</link>
		<comments>/c-tuple/#respond</comments>
		<pubDate>Wed, 29 Jun 2016 04:38:39 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=891</guid>
		<description><![CDATA[<p>Tuple. The Tuple is a typed, immutable, generic construct. It has many items, each item can have any type(even complex items like array inside it). The Tuple type is a class. Once we create the Tuple, we cannot change the values of its fields. Tuple is generally used as a short-term container. Output 1 cat [&#8230;]</p>
<p>The post <a rel="nofollow" href="/c-tuple/">C# Tuple</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Tuple</strong>.<br />
The Tuple is a typed, immutable, generic construct. It has many items, each item can have any type(even complex items like array inside it). The Tuple type is a class. Once we create the Tuple, we cannot change the values of its fields.<br />
Tuple is generally used as a short-term container.</p>
<pre class="brush: csharp; highlight: [6,7]; title: ; notranslate">
using System;
class Program
{
    static void Main()
    {
        Tuple&lt;int, string, bool&gt; tuple =new Tuple&lt;int, string, bool&gt;(1, &quot;cat&quot;, true);
        Console.WriteLine(tuple.Item1);
        Console.WriteLine(tuple.Item2);
        Console.WriteLine(tuple.Item3);
    }
}
</pre>
<p><strong>Output</strong><br />
1<br />
cat<br />
True</p>
<p>The Tuple.Create method returns a reference to a tuple. eg: var tuple = Tuple.Create(&#8220;cat&#8221;, 2, true);</p>
<p>The post <a rel="nofollow" href="/c-tuple/">C# Tuple</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/c-tuple/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C# Func and Action types</title>
		<link>/c-func-and-action-types/</link>
		<comments>/c-func-and-action-types/#respond</comments>
		<pubDate>Wed, 29 Jun 2016 04:10:32 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=887</guid>
		<description><![CDATA[<p>The Func type provides a way to store anonymous methods. For the Func type, the first type parameters are the arguments to the methods, and the final type parameter is the return value. Example. Action type objects do not return a value. They are similar to a void method. A Func type on the other [&#8230;]</p>
<p>The post <a rel="nofollow" href="/c-func-and-action-types/">C# Func and Action types</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>The <strong>Func type</strong> provides a way to store anonymous methods. For the Func type, the first type parameters are the arguments to the methods, and the final type parameter is the return value.</p>
<p><strong>Example.</strong> </p>
<pre class="brush: csharp; highlight: [13,14,15,16,17,18,19]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
[TestClass]
public class UnitTest1
{
    [TestMethod]
    public void FuncTypeTest()
    {
        Func&lt;string, bool&gt; validator =
        word =&gt;
        {
            var count = word.Length;
            return count &gt; 4;
        };
        var isValid = validator(&quot;AjitGoel&quot;);
        Assert.IsTrue(isValid);
    }
}
</pre>
<p><strong>Action type</strong> objects do not return a value. They are similar to a void method.<br />
A Func type on the other hand returns a result. </p>
<pre class="brush: csharp; highlight: [1]; title: ; notranslate">
Action&lt;int&gt; action1 = (int counter) =&gt; Console.WriteLine(&quot;Write {0}&quot;, counter);
</pre>
<p>The post <a rel="nofollow" href="/c-func-and-action-types/">C# Func and Action types</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/c-func-and-action-types/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Generate fibonacci series</title>
		<link>/generate-fibonacci-series/</link>
		<comments>/generate-fibonacci-series/#respond</comments>
		<pubDate>Sat, 25 Jun 2016 01:04:40 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=864</guid>
		<description><![CDATA[<p>Lately I have been reading up on interview related questions. One of the other favorite interview questions interviewers have is to &#8220;write a program to generate fibonacci set of series for a user defined input number&#8221;. In mathematics, the Fibonacci numbers are the numbers in the following integer sequence(Fibonacci sequence) 0,1,1,2,3,5,8,13,21,34,55,89,144&#8230;&#8230;&#8230;&#8230;. So if the user [&#8230;]</p>
<p>The post <a rel="nofollow" href="/generate-fibonacci-series/">Generate fibonacci series</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Lately I have been reading up on interview related questions. One of the other favorite interview questions interviewers have is to &#8220;write a program to generate fibonacci set of series for a user defined input number&#8221;. In mathematics, the Fibonacci numbers are the numbers in the following integer sequence(Fibonacci sequence)<br />
0,1,1,2,3,5,8,13,21,34,55,89,144&#8230;&#8230;&#8230;&#8230;.<br />
So if the user inputs 8 then the output should be<br />
0,1,1,2,3,5,8,13. </p>
<p><strong>Solution</strong></p>
<pre class="brush: csharp; highlight: [36,37,38,39,40,41,42,43,44,45,46,47,48]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void GenerateFibonanciSeries()
        {
            var result = new StringHelper().GenerateFibonanciSeries(8);
            Assert.AreEqual(result[0], 0);
            Assert.AreEqual(result[1], 1);
            Assert.AreEqual(result[2], 1);
            Assert.AreEqual(result[3], 2);
            Assert.AreEqual(result[4], 3);
            Assert.AreEqual(result[5], 5);
            Assert.AreEqual(result[6], 8);
            Assert.AreEqual(result[7], 13);
        }
    }

    public class StringHelper
    {
         public List&lt;long&gt; GenerateFibonanciSeries(long numbersToGenerate)
        {
            if (numbersToGenerate &lt;= 0)
            {
                throw new ArgumentException();
            }
            var result = new List&lt;long&gt;();
            long previousNumber = 0;
            long currentNumber = 1;
            result.Add(previousNumber);
            result.Add(currentNumber);
            for (int counter= 2; counter &lt; numbersToGenerate; counter++)
            {
                long tempNumber = currentNumber + previousNumber;
                result.Add(tempNumber);
                previousNumber = currentNumber;
                currentNumber = tempNumber;                
            }
            return result;
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/generate-fibonacci-series/">Generate fibonacci series</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/generate-fibonacci-series/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: www.ajitgoel.net @ 2017-09-27 03:23:55 by W3 Total Cache -->