<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Interview Questions &#8211; So many manuals, so little time</title>
	<atom:link href="/tag/interview-questions/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>So many manuals, so little time</description>
	<lastBuildDate>Sun, 03 Sep 2017 21:30:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>FizzBuzz using C# yield</title>
		<link>/fizzbuzz-using-c-yield/</link>
		<comments>/fizzbuzz-using-c-yield/#respond</comments>
		<pubDate>Tue, 12 Jul 2016 07:03:39 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=1170</guid>
		<description><![CDATA[<p>Yield. Yield has two great uses, a. It helps to provide custom iteration without creating temp collections. b. It helps to do state-full iteration.</p>
<p>The post <a rel="nofollow" href="/fizzbuzz-using-c-yield/">FizzBuzz using C# yield</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Yield</strong>.<br />
Yield has two great uses,<br />
a. It helps to provide custom iteration without creating temp collections.<br />
b. It helps to do state-full iteration. </p>
<pre class="brush: csharp; title: ; notranslate">
[TestClass]
public class FizzBuzzTest
{
    [TestMethod]
    public void Test1()
    {
        var iEnumerableString = new FizzBuzz().GenerateFizzBuzzUpto(100);
        var list = iEnumerableString.ToList();
        Assert.IsTrue(list[0] == &quot;Fizz:3&quot;);
        Assert.IsTrue(list[1] == &quot;Buzz:5&quot;);
        Assert.IsTrue(list[6] == &quot;FizzBuzz:15&quot;);
    }
}
public class FizzBuzz
{
    public IEnumerable&lt;string&gt; GenerateFizzBuzzUpto(int numberUpto)
    {
        for (var counter = 1; counter &lt; numberUpto; counter++)
        {
            if (counter%3 == 0 &amp;&amp; counter%5 == 0)
            {
                yield return $&quot;FizzBuzz:{counter}&quot;;
            }
            if (counter % 3 == 0)
            {
                yield return $&quot;Fizz:{counter}&quot;;
            }
            if (counter % 5 == 0)
            {
                yield return $&quot;Buzz:{counter}&quot;;
            }
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/fizzbuzz-using-c-yield/">FizzBuzz using C# yield</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/fizzbuzz-using-c-yield/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Concurrent and immutable Collections in C#-Primer</title>
		<link>/concurrent-collections-in-c-primer/</link>
		<comments>/concurrent-collections-in-c-primer/#respond</comments>
		<pubDate>Sun, 10 Jul 2016 20:04:03 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=1096</guid>
		<description><![CDATA[<p>Concurrent(or Threadsafe) collections allow multiple threads to update them simultaneously in a safe way. Concurrent collections are more efficient than implementing a regular collection with a lock. An immutable collection cannot actually be modified. Instead, to modify an immutable collection, you create a new collection that represents the modified collection. The .Net framework has several [&#8230;]</p>
<p>The post <a rel="nofollow" href="/concurrent-collections-in-c-primer/">Concurrent and immutable Collections in C#-Primer</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Concurrent(or Threadsafe) collections</strong> allow multiple threads to update them simultaneously in a safe way. Concurrent collections are more efficient than implementing a regular collection with a lock.<br />
An <strong>immutable collection</strong> cannot actually be modified. Instead, to modify an immutable collection, you create a new collection that represents the modified collection. </p>
<p>The .Net framework has several different collection types.<br />
<strong>ImmutableList&lt;T&gt;</strong> Use this data structure when<br />
a. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. They allow indexing like Lists but they have lower performance than Lists.</p>
<p><strong>ImmutableStack&lt;T&gt;</strong> Use this data structure when<br />
a. you need a first-in, first-out data structure<br />
b. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. ImmutableStack have lower performance than Stack data structures.</p>
<p><strong>ImmutableQueue&lt;T&gt;</strong> Use this data structure when<br />
a. you need a first-in, last-out data structure<br />
b. the collection data does not change very often<br />
b. the collection can be accessed by multiple threads safely.<br />
c. ImmutableQueue have lower performance than Queue data structures.</p>
<p><strong>ImmutableDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items. Use this type when you<br />
a. need a key-value collection of items.<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items in ImmutableDictionary have an unpredictable order.<br />
Performance of ImmutableDictionary is faster than ImmutableSortedDictionary. </p>
<p><strong>ImmutableSortedDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items sorted by key. Use this type when you<br />
a. need a key-value collection of items.<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items are sorted in the collection.</p>
<p><strong>ImmutableHashSet&lt;T&gt;</strong> is just a collection of unique items. Use this type when you<br />
a. do not need to store duplicates<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items in the ImmutableHashSet have an unpredictable order.<br />
Performance of ImmutableHashSet is faster than ImmutableSortedHashSet. </p>
<p><strong>ImmutableSortedSet&lt;T&gt;</strong> is a sorted collection of unique items. Use this type when you<br />
a. do not need to store duplicates<br />
b. the collection data does not change very often<br />
c. can be accessed by multiple threads safely.<br />
d. the items are sorted in the collection.</p>
<p><strong>ConcurrentDictionary&lt;T, TValue&gt;</strong> is a key-value collection of items. Use this type when you<br />
a. need a key-value collection of items.<br />
b. can be accessed by multiple threads safely.<br />
Use the ConcurrentDictionary&lt;T, TValue&gt; when you have multiple threads reading and writing to the shared collection. If the updates are more rare then the ImmutableDictionary&lt;T, TValue&gt; is a better choice. </p>
<p>The post <a rel="nofollow" href="/concurrent-collections-in-c-primer/">Concurrent and immutable Collections in C#-Primer</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/concurrent-collections-in-c-primer/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C# Tuple</title>
		<link>/c-tuple/</link>
		<comments>/c-tuple/#respond</comments>
		<pubDate>Wed, 29 Jun 2016 04:38:39 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=891</guid>
		<description><![CDATA[<p>Tuple. The Tuple is a typed, immutable, generic construct. It has many items, each item can have any type(even complex items like array inside it). The Tuple type is a class. Once we create the Tuple, we cannot change the values of its fields. Tuple is generally used as a short-term container. Output 1 cat [&#8230;]</p>
<p>The post <a rel="nofollow" href="/c-tuple/">C# Tuple</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><strong>Tuple</strong>.<br />
The Tuple is a typed, immutable, generic construct. It has many items, each item can have any type(even complex items like array inside it). The Tuple type is a class. Once we create the Tuple, we cannot change the values of its fields.<br />
Tuple is generally used as a short-term container.</p>
<pre class="brush: csharp; highlight: [6,7]; title: ; notranslate">
using System;
class Program
{
    static void Main()
    {
        Tuple&lt;int, string, bool&gt; tuple =new Tuple&lt;int, string, bool&gt;(1, &quot;cat&quot;, true);
        Console.WriteLine(tuple.Item1);
        Console.WriteLine(tuple.Item2);
        Console.WriteLine(tuple.Item3);
    }
}
</pre>
<p><strong>Output</strong><br />
1<br />
cat<br />
True</p>
<p>The Tuple.Create method returns a reference to a tuple. eg: var tuple = Tuple.Create(&#8220;cat&#8221;, 2, true);</p>
<p>The post <a rel="nofollow" href="/c-tuple/">C# Tuple</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/c-tuple/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C# Func and Action types</title>
		<link>/c-func-and-action-types/</link>
		<comments>/c-func-and-action-types/#respond</comments>
		<pubDate>Wed, 29 Jun 2016 04:10:32 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">/?p=887</guid>
		<description><![CDATA[<p>The Func type provides a way to store anonymous methods. For the Func type, the first type parameters are the arguments to the methods, and the final type parameter is the return value. Example. Action type objects do not return a value. They are similar to a void method. A Func type on the other [&#8230;]</p>
<p>The post <a rel="nofollow" href="/c-func-and-action-types/">C# Func and Action types</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>The <strong>Func type</strong> provides a way to store anonymous methods. For the Func type, the first type parameters are the arguments to the methods, and the final type parameter is the return value.</p>
<p><strong>Example.</strong> </p>
<pre class="brush: csharp; highlight: [13,14,15,16,17,18,19]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
[TestClass]
public class UnitTest1
{
    [TestMethod]
    public void FuncTypeTest()
    {
        Func&lt;string, bool&gt; validator =
        word =&gt;
        {
            var count = word.Length;
            return count &gt; 4;
        };
        var isValid = validator(&quot;AjitGoel&quot;);
        Assert.IsTrue(isValid);
    }
}
</pre>
<p><strong>Action type</strong> objects do not return a value. They are similar to a void method.<br />
A Func type on the other hand returns a result. </p>
<pre class="brush: csharp; highlight: [1]; title: ; notranslate">
Action&lt;int&gt; action1 = (int counter) =&gt; Console.WriteLine(&quot;Write {0}&quot;, counter);
</pre>
<p>The post <a rel="nofollow" href="/c-func-and-action-types/">C# Func and Action types</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/c-func-and-action-types/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Generate fibonacci series</title>
		<link>/generate-fibonacci-series/</link>
		<comments>/generate-fibonacci-series/#respond</comments>
		<pubDate>Sat, 25 Jun 2016 01:04:40 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=864</guid>
		<description><![CDATA[<p>Lately I have been reading up on interview related questions. One of the other favorite interview questions interviewers have is to &#8220;write a program to generate fibonacci set of series for a user defined input number&#8221;. In mathematics, the Fibonacci numbers are the numbers in the following integer sequence(Fibonacci sequence) 0,1,1,2,3,5,8,13,21,34,55,89,144&#8230;&#8230;&#8230;&#8230;. So if the user [&#8230;]</p>
<p>The post <a rel="nofollow" href="/generate-fibonacci-series/">Generate fibonacci series</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Lately I have been reading up on interview related questions. One of the other favorite interview questions interviewers have is to &#8220;write a program to generate fibonacci set of series for a user defined input number&#8221;. In mathematics, the Fibonacci numbers are the numbers in the following integer sequence(Fibonacci sequence)<br />
0,1,1,2,3,5,8,13,21,34,55,89,144&#8230;&#8230;&#8230;&#8230;.<br />
So if the user inputs 8 then the output should be<br />
0,1,1,2,3,5,8,13. </p>
<p><strong>Solution</strong></p>
<pre class="brush: csharp; highlight: [36,37,38,39,40,41,42,43,44,45,46,47,48]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void GenerateFibonanciSeries()
        {
            var result = new StringHelper().GenerateFibonanciSeries(8);
            Assert.AreEqual(result[0], 0);
            Assert.AreEqual(result[1], 1);
            Assert.AreEqual(result[2], 1);
            Assert.AreEqual(result[3], 2);
            Assert.AreEqual(result[4], 3);
            Assert.AreEqual(result[5], 5);
            Assert.AreEqual(result[6], 8);
            Assert.AreEqual(result[7], 13);
        }
    }

    public class StringHelper
    {
         public List&lt;long&gt; GenerateFibonanciSeries(long numbersToGenerate)
        {
            if (numbersToGenerate &lt;= 0)
            {
                throw new ArgumentException();
            }
            var result = new List&lt;long&gt;();
            long previousNumber = 0;
            long currentNumber = 1;
            result.Add(previousNumber);
            result.Add(currentNumber);
            for (int counter= 2; counter &lt; numbersToGenerate; counter++)
            {
                long tempNumber = currentNumber + previousNumber;
                result.Add(tempNumber);
                previousNumber = currentNumber;
                currentNumber = tempNumber;                
            }
            return result;
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/generate-fibonacci-series/">Generate fibonacci series</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/generate-fibonacci-series/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Is string same as its reversed string(i.e Is it a Palindrome)</title>
		<link>/string-reversed-stringi-e-palindrome/</link>
		<comments>/string-reversed-stringi-e-palindrome/#respond</comments>
		<pubDate>Sat, 25 Jun 2016 00:48:45 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=855</guid>
		<description><![CDATA[<p>Lately I have been reading up on interview related questions. One of the favorite interview questions interviewers have is to &#8220;write a program to check if a string is the same as its reversed string i.e check that a string is a Palindrone&#8221;. To make it more interesting, they ask to not use Array.Reverse. Solution</p>
<p>The post <a rel="nofollow" href="/string-reversed-stringi-e-palindrome/">Is string same as its reversed string(i.e Is it a Palindrome)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>Lately I have been reading up on interview related questions. One of the favorite interview questions interviewers have is to &#8220;write a program to check if a string is the same as its reversed string i.e check that a string is a Palindrone&#8221;. To make it more interesting, they ask to not use Array.Reverse. </p>
<p><strong>Solution</strong></p>
<pre class="brush: csharp; highlight: [29,30,31,32,33,34,35]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void IsStringSameAsItsReversedStringThatIsItIsAPalinDrome()
        {
            var result=new StringHelper().IsStringSameAsItsReversedStringThatIsItIsAPalinDrome(&quot;Anna&quot;);
            Assert.AreEqual(result, true);
        }
    }

    public class StringHelper
    {
         public bool IsStringSameAsItsReversedStringThatIsItIsAPalinDrome(string tempString)
        {
            if(String.IsNullOrEmpty(tempString))
            {
                throw new ArgumentException();
            }
            var tempStringLower= tempString.ToLower();
            var tempArray= tempStringLower.ToCharArray();
            var tempArray1 = Reverse(tempArray);
            var reversedString=new string(tempArray1);
            if (reversedString.Equals(tempStringLower))
                return true;
            return false;
        }
        //This function just reverses a array of characters.
        private char[] Reverse(char[] characters)
        {
            for(int counter=0; counter&lt;characters.Length/2;counter++)
            {
                char character = characters[counter];
                characters[counter] = characters[characters.Length - counter -1];
                characters[characters.Length - counter - 1] = character;
            }
            return characters;
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/string-reversed-stringi-e-palindrome/">Is string same as its reversed string(i.e Is it a Palindrome)</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/string-reversed-stringi-e-palindrome/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Compute value of string that has numbers seperated by arithmetic operators.</title>
		<link>/compute-value-string-numbers-seperated-arithmetic-operators/</link>
		<comments>/compute-value-string-numbers-seperated-arithmetic-operators/#respond</comments>
		<pubDate>Fri, 17 Jun 2016 03:24:45 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Interview Questions]]></category>
		<category><![CDATA[Unit Testing]]></category>

		<guid isPermaLink="false">/?p=842</guid>
		<description><![CDATA[<p>One of my friends recently went to an interview to a very well known startup company. It is supposed to hire only the very best technical people in the industry.  One of the problems that he was asked to write a unit test was, Suppose a string has numbers separated by arithmetic operators, how do you [&#8230;]</p>
<p>The post <a rel="nofollow" href="/compute-value-string-numbers-seperated-arithmetic-operators/">Compute value of string that has numbers seperated by arithmetic operators.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>One of my friends recently went to an interview to a very well known startup company. It is supposed to hire only the very best technical people in the industry.  One of the problems that he was asked to write a unit test was, </p>
<p>Suppose a string has numbers separated by arithmetic operators, how do you compute the value of it?</p>
<p>BTW, I personally feel that you are not really testing the knowledge of a person by asking such questions and expecting them to solve it in 6 minutes. </p>
<p><strong>Solution</strong></p>
<pre class="brush: csharp; highlight: [38,39]; title: ; notranslate">
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Data;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            var operator1= new Operator();
            int result = operator1.Maths(&quot;2+3&quot;);
            Assert.AreEqual(result, 5);
        }

        [TestMethod]
        public void TestMethod2()
        {
            var operator1 = new Operator();
            int result = operator1.Maths(&quot;2+3*4&quot;);
            Assert.AreEqual(result, 14);
        }
        [TestMethod]
        public void TestMethod3()
        {
            var operator1 = new Operator();
            int result = operator1.Maths(&quot;2+3*10/5&quot;);
            Assert.AreEqual(result, 8);
        }
    }

    public class Operator
    {
        public int Maths(string operation)
        {
            object result=new DataTable().Compute(operation, null);
            return Int32.Parse(result.ToString());
        }
    }
}
</pre>
<p>The post <a rel="nofollow" href="/compute-value-string-numbers-seperated-arithmetic-operators/">Compute value of string that has numbers seperated by arithmetic operators.</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/compute-value-string-numbers-seperated-arithmetic-operators/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Adapter Pattern with a twist</title>
		<link>/adapter-pattern-with-a-twist/</link>
		<comments>/adapter-pattern-with-a-twist/#respond</comments>
		<pubDate>Sat, 23 Apr 2016 18:20:13 +0000</pubDate>
		<dc:creator><![CDATA[ajitgoel]]></dc:creator>
				<category><![CDATA[Post]]></category>
		<category><![CDATA[.Net]]></category>
		<category><![CDATA[C#]]></category>
		<category><![CDATA[Design Patterns]]></category>
		<category><![CDATA[Interview Questions]]></category>

		<guid isPermaLink="false">http://blog-goel.rhcloud.com/?p=807</guid>
		<description><![CDATA[<p>One of my friends recently went to an interview to a very well known startup company. It is supposed to hire only the very best people in the industry.  One of the problem that he was asked to white board was: You have a robot that can turn left and right. It can also move forward [&#8230;]</p>
<p>The post <a rel="nofollow" href="/adapter-pattern-with-a-twist/">Adapter Pattern with a twist</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p>One of my friends recently went to an interview to a very well known startup company. It is supposed to hire only the very best people in the industry.  One of the problem that he was asked to white board was:</p>
<p>You have a robot that can turn left and right. It can also move forward and backwards. You have a legacy robot that can only turn right and move forward. You want the legacy robot to turn left and to move backwards. Design a adapter class that would allow the legacy robot to turn right and to move backwards.</p>
<p><strong>Solution</strong></p>
<p><img class=" wp-image-808 aligncenter" src="http://blog-goel.rhcloud.com/wp-content/uploads/2016/04/AdapterDesignPatternWithATwist-251x300.jpg" alt="Adapter Design Pattern With A Twist" width="378" height="452" srcset="/wp-content/uploads/2016/04/AdapterDesignPatternWithATwist-251x300.jpg 251w, /wp-content/uploads/2016/04/AdapterDesignPatternWithATwist.jpg 455w" sizes="(max-width: 378px) 100vw, 378px" /></p>
<pre class="brush: csharp; highlight: [46,47,48,51,52,53,59,62]; title: ; notranslate">
using System;
using System.Collections.Generic;
using System.Linq;
public interface IRobot
{
    void GoFront(int noOfSteps);
    void GoBack(int noOfSteps);
    void TurnRight(int degrees);
    void TurnLeft(int degrees);
}
public class LegacyRobot
{
    public void GoFront(int noOfSteps)
    {
    }
    public void TurnRight(int degrees)
    {
    }
}
public class Robot : IRobot
{
    public void GoFront(int noOfSteps)
    {
    }
    public void GoBack(int noOfSteps)
    {
    }
    public void TurnRight(int degrees)
    {
    }
    public void TurnLeft(int degrees)
    {
    }
}
public class LegacyRobotAdapter : IRobot
{
    LegacyRobot legacyRobot;
    public LegacyRobotAdapter(LegacyRobot legacyRobot)
    {
        this.legacyRobot = legacyRobot;
    }
    public void GoFront(int noOfSteps)
    {
        this.legacyRobot.GoFront(noOfSteps);
    }
    //The legacy robot can go back by turning right by 180 degrees
    //then going front by the number of steps requested by the client
    //then turning right by 180 degrees to be facing from where the robot started from. 
    public void GoBack(int noOfSteps)
    {
        this.legacyRobot.TurnRight(180);
        this.legacyRobot.GoFront(noOfSteps);
        this.legacyRobot.TurnRight(180);
    }
    public void TurnRight(int degrees)
    {
        this.legacyRobot.TurnRight(degrees);
    }
    //The legacy robot can turn left by turning right by 360 degrees minus the client requested degrees to turn
    public void TurnLeft(int degrees)
    {
        this.legacyRobot.TurnRight(360 - degrees);
    }
}
</pre>
<p>The post <a rel="nofollow" href="/adapter-pattern-with-a-twist/">Adapter Pattern with a twist</a> appeared first on <a rel="nofollow" href="/">So many manuals, so little time</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/adapter-pattern-with-a-twist/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: https://www.w3-edge.com/products/

 Served from: www.ajitgoel.net @ 2017-09-27 03:24:21 by W3 Total Cache -->